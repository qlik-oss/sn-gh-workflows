name: Build & Release

on:
  workflow_call:
    inputs:
      release:
        required: true
        type: boolean
      release_branches:
        required: false
        default: |
          [
            'main',
            'master',
            'release/*'
          ]
        type: string
      api_specification_path:
        required: false
        type: string
      monorepo:
        required: false
        type: boolean
        default: false

jobs:
  read_package:
    runs-on: ubuntu-latest
    outputs:
      scripts: ${{ steps.package.outputs.scripts }}
      repoNames: ${{ steps.package.outputs.repoNames }}
      repoFolders: ${{ steps.package.outputs.repoFolders }}
      systemJSFiles: ${{ steps.package.outputs.systemJSFiles }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: "**/package.json"
          sparse-checkout-cone-mode: false

      - name: Scan package.json
        id: package
        uses: qlik-oss/sn-gh-workflows/actions/scan-packages@dvr/upload-devbuilds

  build_release:
    runs-on: ubuntu-latest
    needs: read_package
    permissions:
      checks: write
      pull-requests: write
      contents: write

    steps:
      - name: Setup workspace
        uses: qlik-oss/sn-gh-workflows/actions/setup@v3.0.1
        with:
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || secrets.NPM_CI_TOKEN }}
          NPMRC_ENCODED: ${{ secrets.QLIK_NPM_DEV_ENCODED }}

      - name: Build
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'build' )
        run: pnpm run build

      - name: ESLint
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'lint')
        run: pnpm run lint

      - name: Prettier
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'format:check')
        run: pnpm run format:check

      - name: Typescript
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'types:check')
        run: pnpm run types:check

      - name: Run unit tests
        uses: paambaati/codeclimate-action@v5.0.0
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'test:unit')
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: ${{github.workspace}}/coverage/lcov.info:lcov
          coverageCommand: pnpm run test:unit --ci --coverage --reporters="github-actions" --reporters="summary"

      - name: Run Playwright tests
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'test:e2e' )
        run: |
          npx playwright install --with-deps
          pnpm run test:e2e

      - name: Upload results Playwright tests
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./test/rendering/test-report
          if-no-files-found: ignore

      - name: Build ext
        if: contains(fromJSON(needs.read_package.outputs.scripts), 'sense')
        run: pnpm run sense

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-ext
          path: "*-ext/**/*"
          retention-days: 7

      - name: Release
        if: ${{ inputs.release }}
        uses: qlik-oss/sn-gh-workflows/actions/release-it@v3.0.1
        env:
          HUSKY: 0
        with:
          API_SPECIFICATION_PATH: ${{ inputs.api_specification_path }}
          API_KEY: ${{ secrets.API_KEY }}
          APICULTURIST_S3: ${{ secrets.APICULTURIST_S3 }}
          APICULTURIST_GITHUB: ${{ secrets.APICULTURIST_GITHUB }}
          APICULTURIST_TOKEN: ${{ secrets.APICULTURIST_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          release_branches: ${{ inputs.release_branches }}
          monorepo: ${{ inputs.monorepo }}
          spec_command: ${{ contains(fromJSON(needs.read_package.outputs.scripts), 'spec') }}

  api_compliance:
    runs-on: ubuntu-latest
    needs: read_package
    steps:
      - name: Setup workspace
        uses: qlik-oss/sn-gh-workflows/actions/setup@v3.0.1
        with:
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || secrets.NPM_CI_TOKEN }}
          NPMRC_ENCODED: ${{ secrets.QLIK_NPM_DEV_ENCODED }}
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Test API Compliance
        if: ${{ contains(fromJSON(needs.read_package.outputs.scripts), 'spec') }}
        uses: qlik-oss/sn-gh-workflows/actions/test-api-compliance@v3.0.1
        with:
          API_SPECIFICATION_PATH: ${{ inputs.api_specification_path }}
          API_KEY: ${{ secrets.API_KEY }}
          APICULTURIST_S3: ${{ secrets.APICULTURIST_S3 }}
          APICULTURIST_GITHUB: ${{ secrets.APICULTURIST_GITHUB }}
          APICULTURIST_TOKEN: ${{ secrets.APICULTURIST_TOKEN }}
          monorepo: ${{ inputs.monorepo }}

  dev_build:
    runs-on: ubuntu-latest
    needs: read_package
    name: ${{ matrix.repos }}
    strategy:
      fail-fast: false
      matrix:
        repos: ${{fromJSON(needs.read_package.outputs.repoNames)}}
    steps:
      - name: Setup workspace
        uses: qlik-oss/sn-gh-workflows/actions/setup@v3.0.1
        with:
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || secrets.NPM_CI_TOKEN }}
          NPMRC_ENCODED: ${{ secrets.QLIK_NPM_DEV_ENCODED }}
      - name: Dev build
        run: pnpm -r --filter ${{ matrix.repos }} build:dev
      - name: Upload dev build
        uses: qlik-trial/qmfe-workflows/actions/qmfe-to-aws@v1
        with:
          aws-access-key-id: ${{ secrets.QMFE_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.QMFE_DEV_ACCESS_KEY }}
          qmfe-id: ${{ matrix.repos }}
          source: ${{fromJSON(needs.read_package.outputs.repoFolders)[strategy.job-index]}}/dist
          version: ${{ github.event.number }}
          allow-overwrite: true
          include-sourcemaps: true
          aws-bucket-name: "hub-devbuilds"
          s3-key: "nebula"
      - name: Create comment
        id: comment
        uses: qlik-oss/sn-gh-workflows/actions/get-devbuild-comment@dvr/upload-devbuilds
        with:
          package: ${{ matrix.repos }}
          namespace: "nebula"
          version: ${{ github.event.number }}
          file: ${{fromJSON(needs.read_package.outputs.systemJSFiles)[strategy.job-index]}}
      - name: Comment the PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          body: ${{ steps.comment.outputs.comment }}
          edit-mode: replace
          comment-id: ${{ matrix.repos }}
          reactions: rocket
