name: Build & Release

on:
  workflow_call:
    inputs:
      release:
        required: true
        type: boolean
      release_branches:
        required: false
        default: |
          [
            'main',
            'master',
            'release/*'
          ]
        type: string
      api_specification_path:
        required: false
        type: string
      package_manager:
        required: false
        type: string
        default: pnpm
      monorepo:
        required: false
        type: boolean
        default: false

jobs:
  build_release:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: write

    steps:
      - name: Setup workspace
        uses: qlik-oss/sn-gh-workflows/actions/setup@v2
        with:
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || secrets.NPM_CI_TOKEN }}
          NPMRC_ENCODED: ${{ secrets.QLIK_NPM_DEV_ENCODED }}
          package_manager: ${{ inputs.package_manager }}

      - name: Read package.json
        uses: actions/github-script@v7
        id: package
        with:
          script: |
            try {
              const fs = require('fs')
              const jsonString = fs.readFileSync('./package.json')
              var package = JSON.parse(jsonString)
              return Object.keys(package.scripts)
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }

      - name: Build
        if: contains(fromJSON(steps.package.outputs.result), 'build' )
        run: ${{ inputs.package_manager }} run build

      - name: ESLint
        if: contains(fromJSON(steps.package.outputs.result), 'lint')
        run: ${{ inputs.package_manager }} run lint

      - name: Prettier
        if: contains(fromJSON(steps.package.outputs.result), 'format:check')
        run: ${{ inputs.package_manager }} run format:check

      - name: Typescript
        if: contains(fromJSON(steps.package.outputs.result), 'types:check')
        run: ${{ inputs.package_manager }} run types:check

      - name: API Spec
        if: contains(fromJSON(steps.package.outputs.result), 'spec')
        run: |
          ${{ inputs.package_manager }} run spec
          # Fail if the spec command changed any files
          if [[ -z "$(git status --porcelain)" ]];
          then
            exit 0
          else
            echo "Your API specification has changed when running yarn spec. Make sure you commit your API spec changes, or remove unintended changes in the properties definition"
            exit 1
          fi

      - name: Run unit tests
        uses: paambaati/codeclimate-action@v6.0.0
        if: contains(fromJSON(steps.package.outputs.result), 'test:unit')
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: ${{github.workspace}}/coverage/lcov.info:lcov
          coverageCommand: ${{ inputs.package_manager }} run test:unit --ci --coverage --reporters="github-actions" --reporters="summary"

      - name: Run Playwright tests
        if: contains(fromJSON(steps.package.outputs.result), 'test:e2e' )
        run: |
          npx playwright install
          ${{ inputs.package_manager }} run test:e2e

      - name: Upload results Playwright tests
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./test/rendering/test-report
          if-no-files-found: ignore

      - name: Build ext
        if: contains(fromJSON(steps.package.outputs.result), 'sense')
        run: ${{ inputs.package_manager }} run sense

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-ext
          path: "*-ext/**/*"
          retention-days: 7

      - name: Release
        if: ${{ inputs.release }}
        uses: qlik-oss/sn-gh-workflows/actions/release-it@v2
        env:
          HUSKY: 0
        with:
          API_SPECIFICATION_PATH: ${{ inputs.api_specification_path }}
          API_KEY: ${{ secrets.API_KEY }}
          APICULTURIST_S3: ${{ secrets.APICULTURIST_S3 }}
          APICULTURIST_GITHUB: ${{ secrets.APICULTURIST_GITHUB }}
          APICULTURIST_TOKEN: ${{ secrets.APICULTURIST_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          release: ${{ inputs.release }}
          release_branches: ${{ inputs.release_branches }}
          monorepo: ${{ inputs.monorepo }}
          package_manager: ${{ inputs.package_manager }}
          spec_command: ${{ contains(fromJSON(steps.package.outputs.result), 'spec') }}
